Installation
------------
To build and install:

1. mkdir build
2. cd build
3. cmake ..
4. make
5. make install

The following options may be supplied to cmake:

    -DQTC_OLD_MOZILLA=true
        When Firefox is being themed - treat it as if it is < 3.0
        Thunderbird is *always* treated as being of an old Mozilla style.

    -DQTC_MODIFY_MOZILLA=true
        Modify userChrome.css
            - setting KDE button order
            - shrink size of toolbars
        Edit user.js
            - disable instant apply
        Note: This sometimes causes issues with newer versions of these
              applications. Should such issues occur, you should recompile
              QtCurve without this option - and you will have to remove BY HAND
              the changes that QtCurve has made. This will entail removing lines
              from userChrom.css that indicate 'Added by QtCurve' userChrome.css
              is usually in a folder such as:
                    ~/.mozilla/firefox/xxxxxxx.default/chrome/userChrome.css
                    ~/.thunderbird/xxxxxxx.default/chrome/userChrome.css
              Where xxxxxxx is a series of random characters.

    -DQTC_DEFAULT_TO_KDE3=true
       If the KDE_SESSION_VERSION is not set, then assume we are running
       under KDE3. If this cmake option is not set, then KDE4 is assumed.

    -DQTC_STYLE_SUPPORT=true
       Support QtCurve style files. These are stored as
       <kde prefix>/share/apps/kstyle/themes/qtc_<stylename>.themerc

    -DQTC_ENABLE_PARENTLESS_DIALOG_FIX_SUPPORT=true
        Enable support for the 'fixParentlessDialogs' config option. NOTE: This is
        known to break some applications - hence is disabled by default!

Themes
------
As of v0.55, you can create QtCurve based themes. These will appear with KDE's style
control panel's combobox of styles. To create a new theme, select 'QtCurve' from
within KDE's style panel, then configure QtCurve as required. After this, in QtCurve's
config dialog, select 'Export theme' from the options menu button. You will then be
prompted to give your new 'theme' a name, and a comment. QtCurve will then create a file
named 'qtc_<name>.themerc (e.g. qtc_klearlooks.themerc) - this will have the following
format:

    [Misc]
    Name=Klearlooks
    Comment=Clearlooks inspired style
    [KDE]
    WidgetStyle=qtc_klearlooks
    [Settings]
    animatedProgress=false
    appearance=gradient
    ....rest of qtcurve settings...

To use this theme, either copy qtc_<name>.themerc to
$KDEHOME/share/apps/kstyle/themes/ (usually ~/.kde/share/apps/kstyle/themes/)
or copy to <kde install prefix>/share/apps/kstyle/themes/ (usually
/usr/share/apps/kstyle/themes/)

When KDE's style panel is restarted, your new theme should appear in the list.

NOTE: As of QtCurve 1.0.0 style support has been disabled by default, and you will
need to explicitly enable it via QTC_STYLE_SUPPORT

Testing
-------
As of v1.2.1, QtCurve can be forced to read its settings from an alternate config
file via the QTCURVE_CONFIG_FILE environment variable. This is only really useful
for testing alternate config settings without changing the users current settings.
Usage:

    QTCURVE_CONFIG_FILE=~/testfile gimp

If 'QTCURVE_DEBUG' is set before an application is run, QtCurve will output the
applications name and the current icon path.

Creating Distribution Packages
------------------------------
CMake (as of v2.4.x) does not support building rpm or deb packages, and a simple
checkinstall will not work. CMake 2.6 should support rpm and deb packages, but until
then I have supplied a simple shell script to build a package with checkinstall.
To use this:

1. Install QtCurve as described above
2. From within the 'build' folder from step 2 above, call ../common/mkpkg
3. Answer the checkinstall questions.


pixmaps.h
---------

To regenerate this, run the following:

    gdk-pixbuf-csource --raw --name check_on check_on.png >> pixmaps.h
    gdk-pixbuf-csource --raw --name check_x_on check_x_on.png >> pixmaps.h
